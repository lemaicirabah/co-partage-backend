variables:
  # Configuration for Maven and Java
  MAVEN_OPTS: >-
    -Dhttps.protocols=TLSv1.2
    -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository
    -Dorg.slf4j.simpleLogger.showDateTime=true
    -Djava.awt.headless=true

  MAVEN_CLI_OPTS: >-
    --batch-mode
    --errors
    --fail-at-end
    --show-version
    --no-transfer-progress
    -DinstallAtEnd=true
    -DdeployAtEnd=true

  MYSQL_ROOT_PASSWORD: root

# Define the Docker image for the build environment
image: maven:3.8.4-jdk-11-slim

services:
  - name: mysql:8.0
    alias: db
    command: ["--default-authentication-plugin=mysql_native_password"]

# Cache dependencies and plugins between builds
cache:
  paths:
    - .m2/repository

before_script:
  # Install MySQL client
  - apt-get update && apt-get install -y default-mysql-client
  # Wait for MySQL to be ready
  - |
    function mysql_ready {
      mysqladmin ping -h db --silent;
    }
    until mysql_ready; do
      echo "waiting for mysql";
      sleep 10;
    done
  # Create necessary databases
  - mysql -h db -uroot -proot -e "CREATE DATABASE IF NOT EXISTS user_db;"
  - mysql -h db -uroot -proot -e "CREATE DATABASE IF NOT EXISTS authentication_db;"
  - mysql -h db -uroot -proot -e "CREATE DATABASE IF NOT EXISTS notification_db;"
  - mysql -h db -uroot -proot -e "CREATE DATABASE IF NOT EXISTS project_db;"
  - mysql -h db -uroot -proot -e "CREATE DATABASE IF NOT EXISTS group_db;"
  - mysql -h db -uroot -proot -e "CREATE DATABASE IF NOT EXISTS evaluation_db;"
  # Optional: Initialize databases with schema if needed
  # mysql -h db -uroot -proot user_db < /path/to/user_db_schema.sql
  # mysql -h db -uroot -proot authentication_db < /path/to/authentication_db_schema.sql
  # mysql -h db -uroot -proot notification_db < /path/to/notification_db_schema.sql
  # mysql -h db -uroot -proot project_db < /path/to/project_db_schema.sql
  # mysql -h db -uroot -proot group_db < /path/to/group_db_schema.sql
  # mysql -h db -uroot -proot evaluation_db < /path/to/evaluation_db_schema.sql

stages:
  - build
  - test

# Test stage
test:
  stage: test
  script:
    - 'mvn $MAVEN_CLI_OPTS test'
  only:
    - branches

# Build stage
build:
  stage: build
  script:
    - 'mvn $MAVEN_CLI_OPTS clean package'
  only:
    - branches